// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, title, url, description, published_at, feed_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id
`

type CreatePostParams struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	Title       string
	Url         sql.NullString
	Description sql.NullString
	PublishedAt sql.NullString
	FeedID      string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getPostByUrl = `-- name: GetPostByUrl :one
SELECT id, created_at, updated_at, title, url, description, published_at, feed_id FROM posts
WHERE url = $1
`

func (q *Queries) GetPostByUrl(ctx context.Context, url sql.NullString) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByUrl, url)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :one
SELECT id, created_at, updated_at, title, url, description, published_at, feed_id FROM posts
WHERE feed_id = $1
ORDER BY published_at
LIMIT $2
`

type GetPostsByUserParams struct {
	FeedID string
	Limit  int32
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostsByUser, arg.FeedID, arg.Limit)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const updatePostByUrl = `-- name: UpdatePostByUrl :exec
UPDATE posts
SET updated_at = $2
WHERE url = $1
`

type UpdatePostByUrlParams struct {
	Url       sql.NullString
	UpdatedAt string
}

func (q *Queries) UpdatePostByUrl(ctx context.Context, arg UpdatePostByUrlParams) error {
	_, err := q.db.ExecContext(ctx, updatePostByUrl, arg.Url, arg.UpdatedAt)
	return err
}
